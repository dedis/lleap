package ch.epfl.dedis.lleap;

import ch.epfl.dedis.lib.Roster;
import sun.security.rsa.RSAPrivateCrtKeyImpl;

import javax.xml.bind.DatatypeConverter;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPublicKeySpec;

/**
 * DEDISSkipchain represents the pre-configured skipchain on the dedis-servers. It holds the roster-definition,
 * the skipchain-id and the private/public keypair allowed to write to the skipchain.
 */
public class DEDISSkipchain {
    private static String rosterStr = "[[servers]]\n" +
            "  Address = \"tcp://lleap.dedis.ch:15002\"\n" +
            "  Suite = \"Ed25519\"\n" +
            "  Public = \"a863cf64422ab15f405369134cd057f99e2b40cb45afe7848dde11f34853f708\"\n" +
            "  Description = \"Conode_1\"\n" +
            "[[servers]]\n" +
            "  Address = \"tcp://lleap.dedis.ch:15004\"\n" +
            "  Suite = \"Ed25519\"\n" +
            "  Public = \"4706d99de05a58179ccc11ea3c452d9e44b43290de696f83f0fbc8ae26b6679a\"\n" +
            "  Description = \"Conode_2\"\n" +
            "[[servers]]\n" +
            "  Address = \"tcp://lleap.dedis.ch:15006\"\n" +
            "  Suite = \"Ed25519\"\n" +
            "  Public = \"4c4d5dd6fa750d5fb32f005b0a357a39d3886454d9fe63255a89ef0542f835d9\"\n" +
            "  Description = \"Conode_3\"\n";


    // roster is used to communicate with the cothority
    public static Roster roster = Roster.FromToml(rosterStr);
    // skipchainID is the pre-configured skipchain on the cothority. As it is a cryptographic hash,
    // it is secure to trust it as nobody should be able to forge a block with the same ID.
    public static byte[] skipchainID = DatatypeConverter.parseHexBinary("5da91cfa590947b11fa8f81c69319d26f9be7b7b890ed2707e09a5a9e2d6e3cd");

    /**
     * Returns the private key that can be used to sign key/value pairs when they are stored on the
     * skipchain.
     *
     * @return PrivateKey
     */
    public static PrivateKey getPrivate() {
        try {
            KeyFactory kf = KeyFactory.getInstance("RSA");
            return kf.generatePrivate(new PKCS8EncodedKeySpec(DatatypeConverter.parseHexBinary(DEDISSkipchain.privateKeyStr)));
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        } catch (InvalidKeySpecException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Returns the public key that can be used to verify a key/value pair from the skipchain.
     *
     * @return PublicKey
     */
    public static PublicKey getPublic() {
        try {
            RSAPrivateCrtKeyImpl rsaPrivateKey = (RSAPrivateCrtKeyImpl) getPrivate();
            return KeyFactory.getInstance("RSA").generatePublic(new RSAPublicKeySpec(rsaPrivateKey.getModulus(), rsaPrivateKey.getPublicExponent()));
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        } catch (InvalidKeySpecException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    // Created private key by the TestSkipchainRPC.setupKP method.
    private static String privateKeyStr
}
